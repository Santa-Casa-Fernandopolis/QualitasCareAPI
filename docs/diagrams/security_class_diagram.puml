@startuml
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
hide empty members

title Modelo de Segurança — Classes (RBAC + ABAC + Multi-tenant)

package "Domínio (Core)" {
  class Tenant {
    +id: Long
    +name: String
    +code: String
    +active: boolean
  }

  class User {
    +id: Long
    +username: String
    +fullName: String
    +department: String
    --
    +tenant: Tenant
    +roles: Set<Role>
    +status: UserStatus
    +origin: IdentityOrigin
  }

  class Role {
    +id: Long
    +name: String  <<ENFERMEIRO, TECNICO, MEDICO, ADMIN_QUALIDADE>>
    +description: String
    --
    +tenant: Tenant
  }

  class Permission {
    +id: Long
    +resource: ResourceType
    +action: Action
    +feature: String <<nullable, curinga se null>>
    +code: String
    --
    +tenant: Tenant
  }

  class RolePermission {
    +id: Long
    --
    +role: Role
    +permission: Permission
    +tenant: Tenant
  }

  class UserPermissionOverride {
    +id: Long
    +resource: ResourceType
    +action: Action
    +feature: String <<nullable>>
    +effect: Effect <<ALLOW/DENY>>
    +priority: int
    +validFrom: LocalDateTime
    +validUntil: LocalDateTime
    +approved: boolean
    +dualApprovalRequired: boolean
    --
    +user: User
    +tenant: Tenant
  }

  class Policy {
    +id: Long
    +resource: ResourceType
    +action: Action
    +feature: String <<nullable>>
    +effect: Effect
    +enabled: boolean
    +priority: int
    +description: String
    --
    +tenant: Tenant
    +roles: Set<Role>
    +conditions: List<PolicyCondition>
  }

  class PolicyCondition {
    +id: Long
    +type: String  <<ex.: TARGET_DEPARTMENT, USER_PROFESSION>>
    +operator: String <<EQ, NE, IN, NOT_IN>>
    +value: String  <<ex.: CURRENT_DEPT, UTI, ENF>>
    --
    +policy: Policy
  }

  enum ResourceType {
    INDICADOR
    AUDITORIA
    NC
    PROTOCOLO
    CAPACITACAO
    PGRSS
    USUARIO
    DASHBOARD
  }

  enum Action {
    READ
    CREATE
    UPDATE
    DELETE
    APPROVE
    EXPORT
    CLOSE
  }

  enum Effect {
    ALLOW
    DENY
  }

  enum UserStatus {
    PROVISIONED
    ACTIVE
    SUSPENDED
    DISABLED
    EXPIRED
  }

  enum IdentityOrigin {
    LOCAL
    LDAP
    SSO
    IMPORTED
  }
}

package "Autenticação (SAS)" {
  class AuthorizationServerConfig {
    +authorizationServerSecurityFilterChain(http: HttpSecurity): SecurityFilterChain
    +registeredClientRepository(passwordEncoder: PasswordEncoder): RegisteredClientRepository
    +authorizationService(repo: RegisteredClientRepository): OAuth2AuthorizationService
    +authorizationConsentService(): OAuth2AuthorizationConsentService
    +jwkSource(): JWKSource
    +jwtDecoder(jwkSource: JWKSource): JwtDecoder
    +authorizationServerSettings(issuer: String): AuthorizationServerSettings
    +jwtCustomizer(): OAuth2TokenCustomizer<JwtEncodingContext>
  }

  class LocalUserDetailsService {
    +loadUserByUsername(username: String): UserDetails
    -resolveUser(username: String, tenantCode: String): User
  }

  class AuthenticatedUserDetails {
    +getId(): Long
    +getUsername(): String
    +getPassword(): String
    +getAuthorities(): Collection<GrantedAuthority>
    +getTenantId(): Long
    +getTenantCode(): String
    +getTenant(): Tenant
    +getStatus(): UserStatus
    +getOrigin(): IdentityOrigin
    +getFullName(): String
    +getDepartment(): String
    +isAccountNonExpired(): boolean
    +isAccountNonLocked(): boolean
    +isCredentialsNonExpired(): boolean
    +isEnabled(): boolean
  }

  class TokenCustomizer {
    +customize(context: JwtEncodingContext): void <<user_id, tenant_id, tenant_code, full_name, department, user_status, origin, roles>>
  }

  AuthorizationServerConfig --> LocalUserDetailsService
  AuthorizationServerConfig --> TokenCustomizer
  LocalUserDetailsService --> AuthenticatedUserDetails
  LocalUserDetailsService --> User
  LocalUserDetailsService --> Tenant
  AuthenticatedUserDetails --> Tenant
}

package "Autorização (Resource Server)" {
  class AuthContext {
    +userId: Long
    +username: String
    +tenantId: Long
    +roles: Set<String>
    +department: String
    +profession: String <<nullable>>
    +status: UserStatus
    +origin: IdentityOrigin
    +attributes: Map<String,String>
    +isActiveUser(): boolean
    +attribute(key: String): String
    +tenantIdAsString(): String
    +hasRole(roleName: String): boolean
  }

  class HospitalPermissionEvaluator {
    +hasPermission(auth, target, perm): boolean
    +hasPermission(auth, targetId, targetType, perm): boolean
    --
    -parse("MODULO:ACAO@FEATURE"): Parsed
  }

  class AccessDecisionService {
    +isAllowed(ctx: AuthContext, res: ResourceType, act: Action, feature: String, target: Object): boolean
    -audit(...): void
  }

  class PolicyEvaluator {
    +matchesAll(policy: Policy, ctx: AuthContext, target: Object): boolean
    -resolveDynamicToken(value: String, ctx: AuthContext): String
  }

  class TargetLoader {
    +load(targetType: String, targetId: Serializable): Object
  }

  class CurrentUserExtractor {
    +from(auth: Authentication): AuthContext
    -parseLongClaim(value: Object): Long
    -extractTenantFromAuthorities(roles: Set<String>): Long
  }
}

' ======= Relacionamentos =======

' Multi-tenant
Tenant "1" <-- "many" User
Tenant "1" <-- "many" Role
Tenant "1" <-- "many" Permission
Tenant "1" <-- "many" RolePermission
Tenant "1" <-- "many" UserPermissionOverride
Tenant "1" <-- "many" Policy
Policy "1" o- "many" PolicyCondition

' RBAC
User "many" -- "many" Role : possui >
RolePermission "many" --> "1" Role
RolePermission "many" --> "1" Permission
RolePermission --> Tenant

' Overrides (por usuário)
UserPermissionOverride "many" --> "1" User

' Policies (ABAC)
Policy "many" -- "many" Role : aplica a >
Policy --> Tenant

' Aplicação
HospitalPermissionEvaluator ..> AccessDecisionService : usa
HospitalPermissionEvaluator ..> TargetLoader : carrega alvo
HospitalPermissionEvaluator ..> CurrentUserExtractor : extrai usuário
AccessDecisionService ..> PolicyEvaluator : avalia condições
AccessDecisionService ..> Policy : consulta
AccessDecisionService ..> RolePermission : consulta
AccessDecisionService ..> UserPermissionOverride : consulta
AuthContext .. HospitalPermissionEvaluator
AuthContext .. AccessDecisionService
CurrentUserExtractor --> AuthContext : cria
@enduml
